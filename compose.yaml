name: motorcycle_rental_system

networks:
  container-net:
    name: proxy-mrs-network

configs:
  pgadmin_servers_config:
    content: |
      {
        "Servers": {
          "1": {
            "Name": "Motorcycle Rental System DB",
            "Group": "MRS Server Group",
            "Port": ${POSTGRES_PORT},
            "Username": "${POSTGRES_USER}",
            "PassFile": "../../pgpass",
            "Host": "${POSTGRES_HOSTNAME}",
            "SSLMode": "prefer",
            "MaintenanceDB": "${POSTGRES_MAIN_DB}"
          }
        }
      }    

  pgadmin_passfile_config:
    content: |
      ${POSTGRES_HOSTNAME}:${POSTGRES_PORT}:${POSTGRES_MAIN_DB}:${POSTGRES_USER}:${POSTGRES_PSWD}
      ${POSTGRES_HOSTNAME}:${POSTGRES_PORT}:${POSTGRES_APP_DB}:${POSTGRES_USER}:${POSTGRES_PSWD}

services: 
  postgres:
    image: postgres
    container_name: mrs.postgres
    hostname: ${POSTGRES_HOSTNAME}
    
    networks:
      - container-net

    profiles: 
      - prod
      - dev

    ports:
      - "${HOST_DB_VIRTUAL_PORT}:${POSTGRES_PORT}"
    
    volumes:
      - ${HOST_VOLUMES_VIRTUAL_PATH}/data/postgres:/var/lib/postgresql/data
    
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PSWD}
      POSTGRES_DB: ${POSTGRES_MAIN_DB}

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-p", "${POSTGRES_PORT}", "-h", "0.0.0.0", "-d", "${POSTGRES_MAIN_DB}"]
      interval: 20s
      timeout: 30s
      start_period: 45s
      start_interval: 5s
      retries: 8

  pgadmin:
    image: dpage/pgadmin4
    container_name: mrs.pgadmin
    user: "root"

    networks:
      - container-net

    profiles: 
      - prod
      - dev
    
    ports:
      - "${HOST_PGADM_VIRTUAL_PORT}:${PGADMIN_PORT}"

    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PSWD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_PORT}

    configs:
      - source: pgadmin_servers_config
        target: /pgadmin4/servers.json  
      - source: pgadmin_passfile_config
        target: /pgadmin4/pgpass

    depends_on:
       postgres:
         condition: service_healthy
         required: true
    
    entrypoint: >
      sh -c "
      cp -f /pgadmin4/pgpass /var/lib/pgadmin;
      chmod 600 /var/lib/pgadmin/pgpass;
      /entrypoint.sh"

  app:
    image: motorcycle-rental-system/app
    container_name: mrs.app
    hostname: app.host.mrs

    networks:
      - container-net

    profiles: 
      - prod

    build:
      context: ./src
      dockerfile: web/MotorcycleRentalSystem.Api/Dockerfile
      args:
        - "BUILD_CONFIGURATION=${APP_BUILD_ENV}"
    
    ports:
      - "${HOST_APP_VIRTUAL_PORT}:${APP_PORT}"
    
    depends_on:
       postgres:
         condition: service_healthy
         required: true

    environment:
      ConnectionStrings__PostgresCNS: |
        Server=${POSTGRES_HOSTNAME};Port=${POSTGRES_PORT};Database=${POSTGRES_APP_DB};User Id=${POSTGRES_USER};Password=${POSTGRES_PSWD};
      Kestrel__Endpoints__MyHttpEndpoint__Url: http://0.0.0.0:${APP_PORT}
      AppSettings__UseSwagger: ${APP_USE_SWAGGER}
    